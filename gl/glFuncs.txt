void Accum(enum op, float value);
void AlphaFunc(enum func, clampf ref);
boolean AreTexturesResident(sizei n, uint* textures, boolean* residences);
void ArrayElement(int i);
void Begin(enum mode);
void BindTexture(enum target, uint texture);
void Bitmap(sizei width, sizei height, float xorig, float yorig, float xmove, float ymove, ubyte* bitmap);
void BlendFunc(enum sfactor, enum dfactor);
void CallList(uint list);
void CallLists(sizei n, enum type, void* lists);
void Clear(bitfield mask);
void ClearAccum(float red, float green, float blue, float alpha);
void ClearColor(clampf red, clampf green, clampf blue, clampf alpha);
void ClearDepth(clampd depth);
void ClearIndex(float c);
void ClearStencil(int s);
void ClipPlane(enum plane, double* equation);
void Color3b(byte red, byte green, byte blue);
void Color3bv(byte* v);
void Color3d(double red, double green, double blue );
void Color3dv(double* v);
void Color3f(float red, float green, float blue);
void Color3fv(float* v);
void Color3i(int red, int green, int blue);
void Color3iv(int* v);
void Color3s(short red, short green, short blue);
void Color3sv(short* v);
void Color3ub(ubyte red, ubyte green, ubyte blue);
void Color3ubv(ubyte* v);
void Color3ui(uint red, uint green, uint blue);
void Color3uiv(uint* v);
void Color3us(ushort red, ushort green, ushort blue);
void Color3usv(ushort* v);
void Color4b(byte red, byte green, byte blue, byte alpha);
void Color4bv(byte* v);
void Color4d(double red, double green, double blue, double alpha);
void Color4dv(double* v);
void Color4f(float red, float green, float blue, float alpha);
void Color4fv(float* v);
void Color4i(int red, int green, int blue, int alpha);
void Color4iv(int* v);
void Color4s(short red, short green, short blue, short alpha);
void Color4sv(short* v);
void Color4ub(ubyte red, ubyte green, ubyte blue, ubyte alpha);
void Color4ubv(ubyte* v);
void Color4ui(uint red, uint green, uint blue, uint alpha);
void Color4uiv(uint* v);
void Color4us(ushort red, ushort green, ushort blue, ushort alpha);
void Color4usv(ushort* v);
void ColorMask(boolean red, boolean green, boolean blue, boolean alpha);
void ColorMaterial(enum face, enum mode);
void ColorPointer(int size, enum type, sizei stride, void* pointer);
void CopyPixels(int x, int y, sizei width, sizei height, enum type);
void CopyTexImage1D(enum target, int level, enum internalFormat, int x, int y, sizei width, int border);
void CopyTexImage2D(enum target, int level, enum internalFormat, int x, int y, sizei width, sizei height, int border);
void CopyTexSubImage1D(enum target, int level, int xoffset, int x, int y, sizei width);
void CopyTexSubImage2D(enum target, int level, int xoffset, int yoffset, int x, int y, sizei width, sizei height);
void CullFace(enum mode);
void DeleteLists(uint list, sizei range);
void DeleteTextures(sizei n, uint* textures);
void DepthFunc(enum func);
void DepthMask(boolean flag);
void DepthRange(clampd zNear, clampd zFar );
void Disable(enum cap);
void DisableClientState(enum array);
void DrawArrays(enum mode, int first, sizei count);
void DrawBuffer(enum mode);
void DrawElements(enum mode, sizei count, enum type, void* indices);
void DrawPixels(sizei width, sizei height, enum format, enum type, void* pixels);
void EdgeFlag(boolean flag);
void EdgeFlagPointer(sizei stride, void* pointer);
void EdgeFlagv(boolean* flag);
void Enable(enum cap);
void EnableClientState(enum array);
void End();
void EndList();
void EvalCoord1d(double u);
void EvalCoord1dv(double* u);
void EvalCoord1f(float u);
void EvalCoord1fv(float* u);
void EvalCoord2d(double u, double v );
void EvalCoord2dv(double* u);
void EvalCoord2f(float u, float v);
void EvalCoord2fv(float* u);
void EvalMesh1(enum mode, int i1, int i2);
void EvalMesh2(enum mode, int i1, int i2, int j1, int j2);
void EvalPoint1(int i);
void EvalPoint2(int i, int j);
void FeedbackBuffer(sizei size, enum type, float* buffer);
void Finish();
void Flush();
void Fogf(enum pname, float param);
void Fogfv(enum pname, float* params);
void Fogi(enum pname, int param);
void Fogiv(enum pname, int* params);
void FrontFace(enum mode);
void Frustum(double left, double right, double bottom, double top, double zNear, double zFar );
uint GenLists(sizei range);
void GenTextures(sizei n, uint* textures);
void GetBooleanv(enum pname, boolean* params);
void GetClipPlane(enum plane, double* equation);
void GetDoublev(enum pname, double* params);
enum GetError();
void GetFloatv(enum pname, float* params);
void GetIntegerv(enum pname, int* params);
void GetLightfv(enum light, enum pname, float* params);
void GetLightiv(enum light, enum pname, int* params);
void GetMapdv(enum target, enum query, double* v);
void GetMapfv(enum target, enum query, float* v);
void GetMapiv(enum target, enum query, int* v);
void GetMaterialfv(enum face, enum pname, float* params);
void GetMaterialiv(enum face, enum pname, int* params);
void GetPixelMapfv(enum map, float* values);
void GetPixelMapuiv(enum map, uint* values);
void GetPixelMapusv(enum map, ushort* values);
void GetPointerv(enum pname, void** params);
void GetPolygonStipple(ubyte* mask);
ubyte*  GetString(enum name);
void GetTexEnvfv(enum target, enum pname, float* params);
void GetTexEnviv(enum target, enum pname, int* params);
void GetTexGendv(enum coord, enum pname, double* params);
void GetTexGenfv(enum coord, enum pname, float* params);
void GetTexGeniv(enum coord, enum pname, int* params);
void GetTexImage(enum target, int level, enum format, enum type, void* pixels);
void GetTexLevelParameterfv(enum target, int level, enum pname, float* params);
void GetTexLevelParameteriv(enum target, int level, enum pname, int* params);
void GetTexParameterfv(enum target, enum pname, float* params);
void GetTexParameteriv(enum target, enum pname, int* params);
void Hint(enum target, enum mode);
void IndexMask(uint mask);
void IndexPointer(enum type, sizei stride, void* pointer);
void Indexd(double c);
void Indexdv(double* c);
void Indexf(float c);
void Indexfv(float* c);
void Indexi(int c);
void Indexiv(int* c);
void Indexs(short c);
void Indexsv(short* c);
void Indexub(ubyte c);
void Indexubv(ubyte* c);
void InitNames();
void InterleavedArrays(enum format, sizei stride, void* pointer);
boolean IsEnabled(enum cap);
boolean IsList(uint list);
boolean IsTexture(uint texture);
void LightModelf(enum pname, float param);
void LightModelfv(enum pname, float* params);
void LightModeli(enum pname, int param);
void LightModeliv(enum pname, int* params);
void Lightf(enum light, enum pname, float param);
void Lightfv(enum light, enum pname, float* params);
void Lighti(enum light, enum pname, int param);
void Lightiv(enum light, enum pname, int* params);
void LineStipple(int factor, ushort pattern);
void LineWidth(float width);
void ListBase(uint base);
void LoadIdentity();
void LoadMatrixd(double* m);
void LoadMatrixf(float* m);
void LoadName(uint name);
void LogicOp(enum opcode);
void Map1d(enum target, double u1, double u2, int stride, int order, double* points);
void Map1f(enum target, float u1, float u2, int stride, int order, float* points);
void Map2d(enum target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);
void Map2f(enum target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);
void MapGrid1d(int un, double u1, double u2 );
void MapGrid1f(int un, float u1, float u2);
void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
void Materialf(enum face, enum pname, float param);
void Materialfv(enum face, enum pname, float* params);
void Materiali(enum face, enum pname, int param);
void Materialiv(enum face, enum pname, int* params);
void MatrixMode(enum mode);
void MultMatrixd(double* m);
void MultMatrixf(float* m);
void NewList(uint list, enum mode);
void Normal3b(byte nx, byte ny, byte nz);
void Normal3bv(byte* v);
void Normal3d(double nx, double ny, double nz );
void Normal3dv(double* v);
void Normal3f(float nx, float ny, float nz);
void Normal3fv(float* v);
void Normal3i(int nx, int ny, int nz);
void Normal3iv(int* v);
void Normal3s(short nx, short ny, short nz);
void Normal3sv(short* v);
void NormalPointer(enum type, sizei stride, void* pointer);
void Ortho(double left, double right, double bottom, double top, double zNear, double zFar );
void PassThrough(float token);
void PixelMapfv(enum map, sizei mapsize, float* values);
void PixelMapuiv(enum map, sizei mapsize, uint* values);
void PixelMapusv(enum map, sizei mapsize, ushort* values);
void PixelStoref(enum pname, float param);
void PixelStorei(enum pname, int param);
void PixelTransferf(enum pname, float param);
void PixelTransferi(enum pname, int param);
void PixelZoom(float xfactor, float yfactor);
void PointSize(float size);
void PolygonMode(enum face, enum mode);
void PolygonOffset(float factor, float units);
void PolygonStipple(ubyte* mask);
void PopAttrib();
void PopClientAttrib();
void PopMatrix();
void PopName();
void PrioritizeTextures(sizei n, uint* textures, clampf* priorities);
void PushAttrib(bitfield mask);
void PushClientAttrib(bitfield mask);
void PushMatrix();
void PushName(uint name);
void RasterPos2d(double x, double y );
void RasterPos2dv(double* v);
void RasterPos2f(float x, float y);
void RasterPos2fv(float* v);
void RasterPos2i(int x, int y);
void RasterPos2iv(int* v);
void RasterPos2s(short x, short y);
void RasterPos2sv(short* v);
void RasterPos3d(double x, double y, double z );
void RasterPos3dv(double* v);
void RasterPos3f(float x, float y, float z);
void RasterPos3fv(float* v);
void RasterPos3i(int x, int y, int z);
void RasterPos3iv(int* v);
void RasterPos3s(short x, short y, short z);
void RasterPos3sv(short* v);
void RasterPos4d(double x, double y, double z, double w );
void RasterPos4dv(double* v);
void RasterPos4f(float x, float y, float z, float w);
void RasterPos4fv(float* v);
void RasterPos4i(int x, int y, int z, int w);
void RasterPos4iv(int* v);
void RasterPos4s(short x, short y, short z, short w);
void RasterPos4sv(short* v);
void ReadBuffer(enum mode);
void ReadPixels(int x, int y, sizei width, sizei height, enum format, enum type, void* pixels);
void Rectd(double x1, double y1, double x2, double y2 );
void Rectdv(double* v1, double* v2);
void Rectf(float x1, float y1, float x2, float y2);
void Rectfv(float* v1, float* v2);
void Recti(int x1, int y1, int x2, int y2);
void Rectiv(int* v1, int* v2);
void Rects(short x1, short y1, short x2, short y2);
void Rectsv(short* v1, short* v2);
int RenderMode(enum mode);
void Rotated(double ane, double x, double y, double z );
void Rotatef(float ane, float x, float y, float z);
void Scaled(double x, double y, double z );
void Scalef(float x, float y, float z);
void Scissor(int x, int y, sizei width, sizei height);
void SelectBuffer(sizei size, uint* buffer);
void ShadeModel(enum mode);
void StencilFunc(enum func, int ref, uint mask);
void StencilMask(uint mask);
void StencilOp(enum fail, enum zfail, enum zpass);
void TexCoord1d(double s);
void TexCoord1dv(double* v);
void TexCoord1f(float s);
void TexCoord1fv(float* v);
void TexCoord1i(int s);
void TexCoord1iv(int* v);
void TexCoord1s(short s);
void TexCoord1sv(short* v);
void TexCoord2d(double s, double t );
void TexCoord2dv(double* v);
void TexCoord2f(float s, float t);
void TexCoord2fv(float* v);
void TexCoord2i(int s, int t);
void TexCoord2iv(int* v);
void TexCoord2s(short s, short t);
void TexCoord2sv(short* v);
void TexCoord3d(double s, double t, double r );
void TexCoord3dv(double* v);
void TexCoord3f(float s, float t, float r);
void TexCoord3fv(float* v);
void TexCoord3i(int s, int t, int r);
void TexCoord3iv(int* v);
void TexCoord3s(short s, short t, short r);
void TexCoord3sv(short* v);
void TexCoord4d(double s, double t, double r, double q );
void TexCoord4dv(double* v);
void TexCoord4f(float s, float t, float r, float q);
void TexCoord4fv(float* v);
void TexCoord4i(int s, int t, int r, int q);
void TexCoord4iv(int* v);
void TexCoord4s(short s, short t, short r, short q);
void TexCoord4sv(short* v);
void TexCoordPointer(int size, enum type, sizei stride, void* pointer);
void TexEnvf(enum target, enum pname, float param);
void TexEnvfv(enum target, enum pname, float* params);
void TexEnvi(enum target, enum pname, int param);
void TexEnviv(enum target, enum pname, int* params);
void TexGend(enum coord, enum pname, double param);
void TexGendv(enum coord, enum pname, double* params);
void TexGenf(enum coord, enum pname, float param);
void TexGenfv(enum coord, enum pname, float* params);
void TexGeni(enum coord, enum pname, int param);
void TexGeniv(enum coord, enum pname, int* params);
void TexImage1D(enum target, int level, int internalformat, sizei width, int border, enum format, enum type, void* pixels);
void TexImage2D(enum target, int level, int internalformat, sizei width, sizei height, int border, enum format, enum type, void* pixels);
void TexParameterf(enum target, enum pname, float param);
void TexParameterfv(enum target, enum pname, float* params);
void TexParameteri(enum target, enum pname, int param);
void TexParameteriv(enum target, enum pname, int* params);
void TexSubImage1D(enum target, int level, int xoffset, sizei width, enum format, enum type, void* pixels);
void TexSubImage2D(enum target, int level, int xoffset, int yoffset, sizei width, sizei height, enum format, enum type, void* pixels);
void Translated(double x, double y, double z );
void Translatef(float x, float y, float z);
void Vertex2d(double x, double y );
void Vertex2dv(double* v);
void Vertex2f(float x, float y);
void Vertex2fv(float* v);
void Vertex2i(int x, int y);
void Vertex2iv(int* v);
void Vertex2s(short x, short y);
void Vertex2sv(short* v);
void Vertex3d(double x, double y, double z );
void Vertex3dv(double* v);
void Vertex3f(float x, float y, float z);
void Vertex3fv(float* v);
void Vertex3i(int x, int y, int z);
void Vertex3iv(int* v);
void Vertex3s(short x, short y, short z);
void Vertex3sv(short* v);
void Vertex4d(double x, double y, double z, double w );
void Vertex4dv(double* v);
void Vertex4f(float x, float y, float z, float w);
void Vertex4fv(float* v);
void Vertex4i(int x, int y, int z, int w);
void Vertex4iv(int* v);
void Vertex4s(short x, short y, short z, short w);
void Vertex4sv(short* v);
void VertexPointer(int size, enum type, sizei stride, void* pointer);
void Viewport(int x, int y, sizei width, sizei height);